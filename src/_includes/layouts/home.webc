---
layout: 'layouts/base.webc'
---

<script>
handleHashChange = () => {
  switch (window.location.hash) {
    case '':
      return;
    case '#builds':
      Alpine.store("category").set("Builds");
      break;
    case '#foundations':
      Alpine.store("category").set("Foundations");
      break;
  }

  window.location.hash = '';
}

document.addEventListener('alpine:init', () => {
  Alpine.store('filter', {
    tags: [],

    set(tags) {
      this.tags = tags;
    },

    add(tag) {
      this.tags.push(tag);
    },

    remove(tag) {
      let i = this.tags.indexOf(tag);
      if (i > -1) {
        this.tags.splice(this.tags.indexOf(tag), 1);
      }
    },

    replace(oldTag, newTag) {
      this.tags.splice(this.tags.indexOf(oldTag), 1, newTag);
    },
  });

  Alpine.store('category', {
    category: 'Builds',

    set(category) {
      Alpine.store('filter').replace(this.category, category);
      if (this.category == 'Builds' && category == 'Foundations') {
        Alpine.store('filter').remove('Trinket');
        Alpine.store('filter').remove('Arduino');
      }
      if (this.category == 'Foundations' && category == 'Builds') {
        Alpine.store('filter').add(Alpine.store('trinket').on ? 'Trinket' : 'Arduino');
      }
      this.category = category;
    }
  });

  Alpine.store('pages', {
    pages: {},

    add(index, tags) {
      this.pages[index] = tags;
    },
  });
  
  window.addEventListener("hashchange", handleHashChange);
  handleHashChange();
});

// https://codepen.io/rblasam/pen/gOWrNMy

function item(settings) {
  return {
    tags: settings.tags,
    index: settings.index,

    init() {
      this.$store.pages.add(this.index, this.tags);
    },

    get tagFilters() {
      return this.$store.filter.tags;
    },

    get category() {
      return this.$store.category.category;
    },

    get shouldShow() {
      return this.tagFilters.every((v) => this.tags.includes(v));
    },
  };
}
</script>

<main id="main-content" tabindex="-1">
<div>
  <div class="home relative overflow-hidden">
    <div class="m-auto prose md:prose-base prose-sm text-white size-fit py-[15%] px-4">
      <template @raw="content" webc:nokeep></template>
    </div>
    <div class="size-[100%]">
      <div class="slideshow-slide"></div>
      <div class="slideshow-slide"></div>
      <div class="slideshow-slide"></div>
      <div class="slideshow-slide"></div>
    </div>
  </div>
</div>
<div>
		<div class="md:flex" :x-data="`{
      setup: ${JSON.stringify(
        tag_categories.reduce((a, c, i) => {
          if (!a[c.category]) a[c.category] = [];
          a[c.category].push(c.name);
          return a;
        }, {})
      )},
      show: window.innerWidth >= 768,
      showOption: false,

      init() {
        if (this.$store.category.category == \`Builds\`) {
          let v = this.$store.trinket.on;
          this.$store.filter.replace(v ? \`Arduino\` : \`Trinket\`, v ? \`Trinket\` : \`Arduino\`);
        }
        this.$watch(\`$store.trinket.on\`, (v) => {
          if (this.$store.category.category == \`Builds\`) {
           this.$store.filter.replace(v ? \`Arduino\` : \`Trinket\`, v ? \`Trinket\` : \`Arduino\`);
          }
        })
      },

      get tags() {
        return this.$store.filter.tags;
      },
      set tags(value) {
        this.$store.filter.set(value);
      },

      pageCount(tag) {
        return 0; // todo
        // return this.$store.pages.pages[this.$store.trinket.on ? \`t\` : \`a\`][tag] ?? 0;
      },

      checkWindowSize() {
        this.show = window.innerWidth >= 768 || this.showOption;
      },
      setShowOption() {
        this.showOption = !this.showOption;
        this.checkWindowSize();
      },
    }`">
      <button x-on:click="setShowOption()" type="button" class="md:hidden py-4 px-10 w-full text-center font-bold bg-[#B0DC9C]">
        Show filters...
      </button>
      <div x-show="show" x-on:resize.window="checkWindowSize()" class="p-4 md:flex-1">
        <template x-for="category in Object.keys(setup)">
          <div>
            <h3 x-text="category"></h3>
            <ul>
              <template x-for="tag of setup[category]">
                <li class="filter-option">
                  <label>
                    <input type="checkbox" x-bind:value="tag" x-model="tags">
                    <span x-text="tag"></span>
                    <span x-text="pageCount(tag)"></span>
                  </label>
                </li>
              </template>
            </ul>
          </div>
        </template>
      </div>
      <div class="p-4 md:flex-3">
        <p class="py-4 px-6" x-show="$store.category.category == 'Builds'">
          Showcase studentsâ€™ final projects, emphasizing their connection to foundational
          learning and activity design.
        </p>
        <p class="py-4 px-6" x-show="$store.category.category == 'Foundations'">
          Provide students with the resources and small exercises needed to learn and master core concepts.
        </p>
        <div class="grid sm:grid-cols-2 lg:grid-cols-3">
          <related-pages webc:for="(item, i) of pages" @attributes="item" :index="i" :is-home="true"></related-pages>
        </div>
      </div>
	</div>
</div>
