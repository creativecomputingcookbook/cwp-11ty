---
layout: 'layouts/base.webc'
---

<script>
handleHashChange = () => {
  switch (window.location.hash) {
    case '':
      return;
    case '#builds':
      Alpine.store("store").setCategory("Builds");
      break;
    case '#foundations':
      Alpine.store("store").setCategory("Foundations");
      break;
  }

  window.location.hash = '';
}

handleResize = () => {
  let w = window.innerWidth;
  let s = 6;
  if (w >= 1024) s = 9;
  if (w < 640) s = 3;
  Alpine.store("store").changePageMaxSize(s);
}

document.addEventListener('alpine:init', () => {
  Alpine.store('store', {
    tags: ['Builds'],
    category: 'Builds',
    allItems: {},
    page: 1,
    maxSize: 3,
    currentItems: [],

    setTags(tags) {
      this.page = 1;
      this.tags = tags;
      this.filterItems();
    },
    addTag(tag) {
      this.page = 1;
      this.tags.push(tag);
      this.filterItems();
    },
    removeTag(tag) {
      let i = this.tags.indexOf(tag);
      if (i > -1) {
        this.page = 1;
        this.tags.splice(this.tags.indexOf(tag), 1);
        this.filterItems();
      }
    },
    replaceTag(oldTag, newTag) {
      this.page = 1;
      this.tags.splice(this.tags.indexOf(oldTag), 1, newTag);
      this.filterItems();
    },

    filterItems() {
      this.currentItems = Object.entries(this.allItems).filter(o => this.tags.every((v) => o[1].includes(v))).map(o => o[0]);
    },

    setCategory(category) {
      this.replaceTag(this.category, category);
      if (this.category == 'Builds' && category == 'Foundations') {
        this.removeTag('Trinket');
        this.removeTag('Arduino');
      }
      if (this.category == 'Foundations' && category == 'Builds') {
        this.addTag(Alpine.store('trinket').on ? 'Trinket' : 'Arduino');
      }
      this.category = category;
    },

    addItem(index, tags) {
      this.allItems[index] = tags;
      this.filterItems();
    },

    setPage(page) {
      this.page = page;
    },

    pageCount() {
      return Math.ceil(this.currentItems.length / this.maxSize);
    },

    countPagesForTag(tag) {
      return this.currentItems.map(i => this.allItems[i]).filter(i => i.includes(tag)).length;
    },

    shouldShow(index) {
      let i = this.currentItems.indexOf(index.toString());
      return (i >= (this.page - 1) * this.maxSize && i < this.page * this.maxSize);
    },

    changePageMaxSize(maxSize) {
      this.maxSize = maxSize;
      this.page = Math.min(this.page, this.pageCount());
    }
  })
  
  window.addEventListener("resize", handleResize);
  handleResize();

  window.addEventListener("hashchange", handleHashChange);
  handleHashChange();
});

// https://codepen.io/rblasam/pen/gOWrNMy

function item(settings) {
  return {
    tags: settings.tags,
    index: settings.index,

    init() {
      this.$store.store.addItem(this.index, this.tags);
    },

    get tagFilters() {
      return this.$store.store.tags;
    },

    get category() {
      return this.$store.store.category;
    },

    get shouldShow() {
      return this.$store.store.shouldShow(this.index);
    }
  };
}
</script>
<style>
  .pagination {
    display: inline-block;
  }

  .pagination a {
    color: black;
    padding: 8px 12px;
    text-decoration: none;
    border-radius: 5px;
  }

  .pagination a.active {
    background-color: #2A005F;
    color: white;
    border-radius: 5px;
  }

  .pagination a:hover:not(.active) {background-color: #ddd;}
</style>

<main id="main-content" tabindex="-1">
<div>
  <div class="home relative overflow-hidden">
    <div class="m-auto prose md:prose-base prose-sm text-white size-fit py-[15%] px-4">
      <template @raw="content" webc:nokeep></template>
    </div>
    <div class="size-[100%]">
      <div class="slideshow-slide"></div>
      <div class="slideshow-slide"></div>
      <div class="slideshow-slide"></div>
      <div class="slideshow-slide"></div>
    </div>
  </div>
</div>
<div>
		<div class="md:flex" :x-data="`{
      setup: ${JSON.stringify(
        tag_categories.reduce((a, c, i) => {
          if (!a[c.category]) a[c.category] = [];
          a[c.category].push(c.name);
          return a;
        }, {})
      )},
      show: window.innerWidth >= 768,
      showOption: false,

      init() {
        if (this.$store.store.category == \`Builds\`) {
          let v = this.$store.trinket.on;
          this.$store.store.addTag(v ? \`Trinket\` : \`Arduino\`);
        }
        this.$watch(\`$store.trinket.on\`, (v) => {
          if (this.$store.store.category == \`Builds\`) {
           this.$store.store.replaceTag(v ? \`Arduino\` : \`Trinket\`, v ? \`Trinket\` : \`Arduino\`);
          }
        })
      },

      get tags() {
        return this.$store.store.tags;
      },
      set tags(value) {
        this.$store.store.setTags(value);
      },

      pageCount(tag) {
        return this.$store.store.countPagesForTag(tag);
      },

      checkWindowSize() {
        this.show = window.innerWidth >= 768 || this.showOption;
      },
      setShowOption() {
        this.showOption = !this.showOption;
        this.checkWindowSize();
      },
    }`">
      <button x-on:click="setShowOption()" type="button" class="md:hidden py-4 px-10 w-full text-center font-bold bg-[#B0DC9C]">
        Show filters...
      </button>
      <div x-show="show" x-on:resize.window="checkWindowSize()" class="p-4 md:flex-1">
        <template x-for="category in Object.keys(setup)">
          <div>
            <h3 x-text="category"></h3>
            <ul>
              <template x-for="tag of setup[category]">
                <li class="filter-option">
                  <label>
                    <input type="checkbox" x-bind:value="tag" x-model="tags">
                    <span x-text="tag"></span>
                    <span x-text="pageCount(tag)"></span>
                  </label>
                </li>
              </template>
            </ul>
          </div>
        </template>
      </div>
      <div class="p-4 md:flex-3">
        <p class="py-4 px-6" x-show="$store.store.category == 'Builds'">
          Showcase studentsâ€™ final projects, emphasizing their connection to foundational
          learning and activity design.
        </p>
        <p class="py-4 px-6" x-show="$store.store.category == 'Foundations'">
          Provide students with the resources and small exercises needed to learn and master core concepts.
        </p>
        <div class="grid sm:grid-cols-2 lg:grid-cols-3">
          <related-pages webc:for="(item, i) of pages" @attributes="item" :index="i" :is-home="true"></related-pages>
        </div>
        <div class="pagination">
          <a
            x-show="$store.store.page > 1"
            x-on:click.prevent="$store.store.page -= 1"
          >&laquo;</a>
          <template x-for="idx in $store.store.pageCount()">
            <a
              x-bind:class="idx === $store.store.page ? 'active' : false"
              x-text="idx"
              x-bind:aria-current="idx === $store.store.page ? 'page' : false"
              x-on:click.prevent="$store.store.page = idx"
            ></a>
          </template>
          <a
            x-show="$store.store.page < $store.store.pageCount()"
            x-on:click.prevent="$store.store.page += 1"
          >&raquo;</a>
        </div>
      </div>
	</div>
</div>
